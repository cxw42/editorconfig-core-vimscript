#!/bin/bash
# editorconfig: Editorconfig Vimscript core CLI
# This script is CC-BY-SA 3.0.

# Get the directory of this script.  From
# https://stackoverflow.com/a/246128/2877364 by
# https://stackoverflow.com/users/407731 et al.

DIR=
function get_dir()
{
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
}

get_dir

###

# Debug output
debug="${EDITORCONFIG_DEBUG}"   # Debug filename
if [[ $debug != /* ]]; then     # Relative to this script unless it
    debug="${DIR}/${debug}"     # starts with a slash.  This is because
fi                              # cwd is usually not $DIR when testing.
[[ $debug ]] && date >> "$debug"

# Option processing
confname='.editorconfig'

while getopts 'vf:' opt ; do
    case "$opt" in
        (v) echo "EditorConfig VimScript Core Version 0.12.2"
            exit 0
            ;;

        (f) confname="$OPTARG"
            ;;
        # TODO support -b[, -h?]

    esac
done

shift $(( $OPTIND - 1 ))

if (( "$#" < 1 )); then
    exit 1
fi

fn="$(mktemp)"      # Output file

vim_args=(
    -c "set runtimepath+=$DIR"
)

vim_args+=(
    -c "call editorconfig_core#currbuf_cli('${fn//\'/\'\'}', '${confname//\'/\'\'}')"
    -c 'q!'
    -- "$1"
)

# Run editorconfig.  Thanks for options to
# http://vim.wikia.com/wiki/Vim_as_a_system_interpreter_for_vimscript .
# Add -V1 to the below for debugging output.
# Do not output anything to stdout or stderr,
# since it messes up ctest's interpretation
# of the results.

vim -nNes -i NONE -u NONE -U NONE \
    "${vim_args[@]}" \
    </dev/null &>> "${debug:-/dev/null}"
vimstatus="$?"
if [[ $vimstatus -eq 0 ]]; then
    cat "$fn"
fi

# Debug output cannot be included on stdout or stderr, because
# ctest's regex check looks both of those places.  Therefore, dump to a
# separate debugging file.
if [[ $debug ]]
then
    echo "Current directory: $(pwd)" >> "$debug"
    echo "Script directory: $DIR" >> "$debug"
    echo Vim args: "${vim_args[@]}" | od -c >> "$debug"
    echo "Vim returned $vimstatus" >> "$debug"
    echo "Output was:" >> "$debug"
    od -c "$fn" >> "$debug"
fi

rm -f "$fn"

exit "$vimstatus"
# vi: set ft=sh:
